var myCalculator = new Calculator();
$(document).ready(function() {
    $('.buttons button').click(myCalculator.button_clicked);
});
function Calculator() {
    var self = this;
    //stores Calculator's "this" in "self" so it can be used in click handlers
    this.inputs_array = [];
    //placeholder for the array that holds the input objects
    this.index = 0;
    //set this.index to 0 so inputs go into the first space in the array
    this.last_input = {};
    //placeholder for the memory of the object of the last clicked input
    this.history = {};
    //placeholder for the history object that will be placed in a property on the numbers that are generated by prepare_answer()
    this.last_number = null;
    //placeholder for the memory of the value of the last number inputted
    this.last_operation = null;
    //placeholder for the memory of the value of the last operator inputted
    this.button_clicked = function() {
        //method called when the html button elements are clicked
        var clicked_type = $(this).attr('class');
        //gets the class attribute of the element clicked and stores it in a variable
        var clicked_value = $(this).val();
        //gets the value attribute of the element clicked and stores it in a variable
        if (clicked_type === "number") {
            self.number_clicked(clicked_value);
            //call number_clicked if you clicked a number button or the decimal point and the negative/positive button
        }
        else if (clicked_type === "operator") {
            self.operator_clicked(clicked_value);
            //call operator_clicked if you clicked an operator button
        }
        else if (clicked_type === "equalSign") {
            self.equals_clicked();
            //call equals_clicked if you clicked the equals button
        }
        else if (clicked_type === "AC") {
            self.ac_clicked();
            //call ac_clicked if you clicked the clear all button (C)
        }
        else if (clicked_type === "C") {
            self.clear_entry_clicked();
            //call clear_entry_clicked if you clicked the clear entry button (CE)
        }
        else if (clicked_type === "DEL") {
            self.delete_clicked();
            //call delete_clicked if you clicked a delete button (DEL)
        }
    };
    this.number_clicked = function(clicked_value) {
        var last_value = null;
        //placeholder for the value in the previous object if it exists
        if (self.inputs_array.length && self.inputs_array[self.index - 1].type === "number") {
            //if the previous input exists and was also a number
            self.index--;
            //go back to the previous input so we can concatenate this current input onto it
            last_value = self.inputs_array[self.index].value;
            //assigning last_value since we know it exists now
            if (!self.inputs_array[self.index].from_result) {
                //checks if the previous input was the result of pressing equals. We don't want to concatenate in that case
                if (clicked_value === "." && last_value.indexOf(".") > -1) {
                    clicked_value = last_value;
                    //if you clicked the decimal point and there was already a decimal point, keep the old input
                }
                else if (last_value === "0" || last_value === "-0" ) {
                    last_value = clicked_value;
                    //if the previous input was "0" or "-0", replace it with the new input
                }
                else if (clicked_value === "-") {
                    //if you clicked the negative/positive button
                    if (last_value.indexOf("-") > -1) {
                        clicked_value = last_value.replace("-", "");
                        //remove the "-" from the previous input if it had one
                    }
                    else if (last_value.length < 11) {
                        clicked_value = "-" + last_value;
                        //add a "-" to the beginning of the previous input if it didn't have one
                    }
                    else {
                        clicked_value = last_value;
                        //if a "-" wouldn't fit in the display, don't do anything to the previous input
                    }
                }
                else {
                    clicked_value = last_value + clicked_value;
                    //if both inputs are regular digits, just concatenate normally
                }
            }
            else {
                //the previous input was the result of pressing equals
                self.last_input = {};
                self.last_number = null;
                self.last_operation = null;
                //clears these properties since the answer will be replaced with the new number so it's like starting over from the beginning
            }
        }
        else if (clicked_value === ".") {
            clicked_value = "0.";
            //if the previous input wasn't a number and you pressed the decimal point, adds a 0 to it
        }
        clicked_value = clicked_value.slice(0,11);
        //limits concatenated number to 11 characters
        self.last_input = {"type": "number", "value": clicked_value};
        //remembers this object
        self.last_number = clicked_value;
        //remembers the number value of this object
        self.inputs_array[self.index] = self.last_input;
        //put the remembered object into the inputs array
        self.index++;
        //move forward one index
        self.display(clicked_value);
        //show the number on the screen
    };
    this.operator_clicked = function(clicked_value) {
        if (self.index === 0) {
            return;
            //disables insertion of operator at index 0
        }
        if (self.inputs_array.length && self.inputs_array[self.index - 1].type === "operator") {
            self.index--;
            //goes backward one index if the previous input was also an operator to overwrite it
        }
        if (self.index > 2) {
            //index will be greater than 2 after you've entered 3 objects already (number, operator, number)
            if ( (clicked_value === "+" || clicked_value === "-") ) {
                /**
                 * if clicked button was "+" or "-"
                 * send the array to the prepare_answer method to automatically do all math possible
                 * if "x" or "/" were clicked after the index passed 3, they will skip this and be pushed to the end of the array instead
                 * this should enforce order of operations since prepare answer will begin solving from the end of the array
                 */
                var solved_value = self.prepare_answer();
                self.inputs_array = [{"type": "number", "value": solved_value, "history": self.history}];
                //sets the input array to just the answer generated, with a history property of an array of objects representing the equation it came from
                self.index = 1;
                //puts the index back at 1 since there's only one entry now
                self.display(solved_value);
                //display the answer generated
            }
        }
        self.last_input = {"type": "operator", "value": clicked_value};
        //remember the object
        self.last_operation = clicked_value;
        //remember the value of the operator clicked
        self.inputs_array[self.index] = self.last_input;
        //add the remembered object to the end of the inputs array
        self.index++;
        //move forward one index
    };
    this.prepare_answer = function() {
        //too complicated, reorganize
        var num1 = null;
        var num2 = null;
        var operator = null;
        var lastIndex = this.inputs_array.length-1;
        var solved_value = null;
        var solution_index = null;
        if (this.inputs_array.length > 3) {
            /**
             * If the inputs array has more than 3 things in it, it needs to use order of operations
             * the array will only have more than 3 items if multiplication / division was tried before addition / subtraction was automatically solved
             */
            for (var i = lastIndex; i > 0; i -= 2) {
                /**
                 * loop through the array from the end, decrementing i by 2 each loop
                 * the loop should solve the equation in the last 3 indexes
                 * when its done solving that, it erases the last two indexes and
                 * then puts the answer in the spot of the third to last index
                 * when i decrements by 2, it starts on the index of where the new answer was just placed
                 * this continues until every equation of 3 items is solved
                 */
                if (this.inputs_array[i].type === "number") {
                    //if the last input is a number
                    num2 = parseFloat(this.inputs_array[i].value);
                    operator = this.inputs_array[i - 1].value;
                    self.last_operation = operator;
                    //remember the last operator in the loop, should be either addition or subtraction
                    num1 = parseFloat(this.inputs_array[i - 2].value);
                    self.last_number = num1;
                    //remember the last number in the loop, should be the first number in the array
                    solution_index = i - 2;
                }
                else {
                    //if it's not a number it has to be an operator
                    i++;
                    //go to the index num2 would have been
                    operator = this.inputs_array[i - 1].value;
                    num1 = parseFloat(this.inputs_array[i - 2].value);
                    num2 = num1;
                    //since the last input was an operator there's a missing operand, so num2 is the same as num1
                    solution_index = i - 2;
                }
                this.inputs_array.splice(i - 2, 3);
                solved_value = this.do_math(num1, num2, operator);
                if (i >= lastIndex) {
                    //if this is the first equation, don't store anything in the history property of the num2
                    self.history = [
                        {"type": "number", "value": "" + num1},
                        {"type": "operator", "value": operator},
                        {"type": "number", "value": "" + num2}
                    ];
                }
                else {
                    //if it's not the first equation, store the previous equation in the history property of num2
                    self.history = [
                        {"type": "number", "value": "" + num1},
                        {"type": "operator", "value": operator},
                        {"type": "number", "value": "" + num2, "history": self.history}
                    ];
                }

                this.inputs_array[solution_index] = {"type": "number", "value": solved_value};
                //puts a number object representing the solution in the space where num1 used to be
                self.index = solution_index + 1;
                //moves the calculator's index to one space after the solution
            }
        }
        else {
            //the inputs array doesn't have more than objects in it
            for (i = 0; i < this.inputs_array.length; i++) {
                //loop through the array from the beginning
                if (this.inputs_array[i].type === "number" && num1 === null) {
                    //if the object is a number, assign its value to num1
                    num1 = this.inputs_array[i].value;
                    num1 = parseFloat(num1);
                }
                else if (this.inputs_array[i].type === "number") {
                    //if it's a number but num1 is already set, then assign it to num2
                    num2 = this.inputs_array[i].value;
                    num2 = parseFloat(num2);
                }
                else {
                    //if it's not a number, assign it to the operator
                    operator = this.inputs_array[i].value;
                }
            }
            self.history = self.inputs_array;
            //remember the array of all 3 objects
        }
        if (operator === null && self.last_operation) {
            //if it no operator was found, but a previous operation was stored in the memory
            operator = self.last_operation;
            //use the remembered operation
            num2 = parseFloat(self.last_number);
            //use the last remembered number in num2 spot (might be num1, which is used for partial operand functionality)
        }
        return this.do_math(num1, num2, operator);
        //returns the result of do_math with the final values of num1, num2, and operator after all loops
    };
    this.equals_clicked = function() {
        var solved_value = self.prepare_answer();
        //returns the number value of the answer from the equation inputted
        self.inputs_array = [{"type": "number", "value": solved_value, "from_result": true, "history": self.history}];
        //puts an object of the solution in the inputs array,
        //has a history property of the memory of the equation that made it
        //has a from_result property to disable concatenation to this number
        self.index = 1;
        //move forward one index past the answer
        self.display(solved_value);
        //show the answer on the screen
    };
    this.ac_clicked = function() {
        self.index = 0;
        self.inputs_array = [];
        self.last_input = {};
        self.history = {};
        self.last_number = null;
        self.last_operation = null;
        self.display("");
        //resets all the memory and clears the screen
    };
    this.clear_entry_clicked = function() {
        /**
         * goes back to the previous number input
         * if the current input was the solution to an equation, it reads the history property on that object
         * then sets the inputs array to whatever is in that property
         * and displays the third object's value in the display
         */
        if (self.index) {
            self.index--;
            //go backwards one index if possible
        }
        if (self.inputs_array.length) {
            //if the inputs array has any objects in it
            if (self.inputs_array[self.index].history) {
                //if the item at the current index (we went backward one index) has a history property
                self.inputs_array = self.inputs_array[self.index].history;
                //change the inputs array to the array of objects in the history property
                self.index = self.inputs_array.length;
                //move to one space after the last item in the new inputs array we got from history
                if (self.inputs_array[self.inputs_array.length - 1].type === "operator") {
                    self.inputs_array.pop();
                    self.last_operation = null;
                    //if the last input is an operator, remove it from the array
                    if (self.index) {
                        self.index--;
                        //decrement the index again since we erased the last thing
                    }
                }
                self.display(self.inputs_array[self.inputs_array.length - 1].value);
                //displays the last number in the new inputs array we got from the history property
            }
            else {
                //the item at the current index (remember this is after decrement) doesn't have history property
                self.inputs_array.pop();
                //remove the last object from the array
                if (self.index) {
                    self.index--;
                    //decrement the index again since we removed the last thing
                }
                if (self.inputs_array.length) {
                    //if the array still has objects after pop();
                    if (self.inputs_array[self.index].type === "operator") {
                        self.inputs_array.pop();
                        self.last_operation = null;
                        //if the current object is an operator, remove it since we only want to go back to numbers
                        if (self.index) {
                            self.index--;
                            //decrement the index again if possible
                        }
                        self.display(self.inputs_array[self.index].value);
                        self.last_number = self.inputs_array[self.index].value;
                        //display the previous number and remember it
                    }
                    self.index++;
                    //move one index forward from the displayed number
                }
                else {
                    //if pop() removed the last object in the array
                    self.last_input = {};
                    self.history = {};
                    self.last_number = null;
                    self.last_operation = null;
                    self.display("");
                    //forget everything and clear the screen
                }
            }
        }
    };
    this.delete_clicked = function() {
        if (self.index) {
            self.index = self.inputs_array.length - 1;
            var obj = self.inputs_array[self.index];
            if (obj.value.length > 1) {
                obj.value = obj.value.substring(0, obj.value.length - 1);
                self.display(obj.value);
                self.index++;
            }
            else {
                self.inputs_array.pop();
                self.display("");
            }
        }
    };
    this.display = function(input) {
        $('.display-main').text(input);
    };
    this.do_math = function(num1, num2, operator) {
        var result = null;
        if (num1 === null) {
            num1 = 0;
        }
        if (num2 === null) {
            num2 = num1;
            this.last_number = num2;
        }
        if (operator === null) {
            this.last_operation = null;
            this.last_number = null;
            return num1;
        }
        if (operator === "+") {
            result = num1 + num2;
        }
        else if (operator === "-") {
            result = num1 - num2;
        }
        else if (operator === "*" || operator === "x" || operator === "X"){
            result = num1 * num2;
        }
        else if (operator === "/") {
            if (num2 === 0) {
                return "ERROR";
            }
            else {
                result = num1 / num2;
            }
        }
        else { //invalid input
            return "ERROR";
        }
        if (result > 99999999999 || result < -9999999999) {
            return "ERROR";
        }
        var result_string = "" + result;
        result_string = result_string.split(".");
        var exp = 10 - result_string[0].length;
        if (exp > 0) {
            result = Math.round(result * Math.pow(10, exp)) / Math.pow(10, exp);
        }
        return result;
    };
}